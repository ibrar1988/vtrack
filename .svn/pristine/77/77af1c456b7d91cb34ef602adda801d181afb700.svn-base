package com.perigrine.businesscardverification;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.location.Address;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.JsonHttpResponseHandler;
import com.perigrine.Helper.APICalls;
import com.perigrine.Helper.Common;
import com.perigrine.Helper.CropOption;
import com.perigrine.Helper.CropOptionAdapter;
import com.perigrine.Helper.NetworkAdapter;
import com.perigrine.Model.VisitorModel;
import com.perigrine.OCRSDk.BusCardSettings;
import com.perigrine.OCRSDk.Client;
import com.perigrine.OCRSDk.Task;
import com.squareup.picasso.Picasso;

import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import cz.msebera.android.httpclient.Header;
import cz.msebera.android.httpclient.entity.StringEntity;

public class VisitorDetails extends AppCompatActivity implements View.OnClickListener {

    ProgressDialog dialog;
    private Spinner spinner_departments;
    private Button btn_verify, btn_overRidden;
    private EditText et_add_name, et_add_company, et_add_phno, et_add_email,
            et_add_title, et_add_homepage, et_add_address,  et_add_scannedDate,et_add_whomToMeet_email,et_add_whomTomeet_phno,et_add_whomTomeet_role;
    AutoCompleteTextView et_add_whomToMeet ;
    private LinearLayout ll_add_scannedDate;
    private String overrideData = "";
    private String jdata = "";
    private VisitorModel vm;
    private String resultUrl = "result.txt";
    private ImageView iv_businessCard_captured;
    private String selectedId = "";
    private String imageFilePath = "";
    private ArrayList<String> departmentsList;
    private String selectedDeptID,selectedDeptName;
    String primary_color;
    String secondary_color;
    String logo_url;

    private static Uri getOutputMediaFileUri() {
        return Uri.fromFile(getOutputMediaFile());
    }

    /**
     * Create a File for saving an image or video
     */
    private static File getOutputMediaFile() {
        // To be safe, you should check that the SDCard is mounted
        // using Environment.getExternalStorageState() before doing this.

        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_PICTURES), "ABBYY Cloud OCR SDK Demo App");
        // This location works best if you want the created images to be shared
        // between applications and persist after your app has been uninstalled.

        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) {
            if (!mediaStorageDir.mkdirs()) {
                return null;
            }
        }
        // Create a media file name
        File mediaFile = new File(mediaStorageDir.getPath() + File.separator + "image.jpg");
        return mediaFile;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.vistor_details);

        SharedPreferences sharedPreferences = getSharedPreferences("new_theme", MODE_PRIVATE);
        primary_color =  sharedPreferences.getString("primary_Color", "#F00025");
        secondary_color = sharedPreferences.getString("secondary_Color", "#aaaaaa");
        logo_url = sharedPreferences.getString("org_Logo","");

        findViews();
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setBackgroundColor(Color.parseColor(primary_color));
//        setSupportActionBar(toolbar);
        //Back Button for toolbar
        toolbar.setNavigationIcon(getResources().getDrawable(R.drawable.backnav));
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //What to do on back clicked

                finish();
            }
        });
        jdata = getIntent().getStringExtra("jdata");
        System.out.println("jdata is:::" + jdata);
        try {
            if (!jdata.trim().equals("")) {
                btn_verify.setText("REVISIT");
                ll_add_scannedDate.setVisibility(View.VISIBLE);
                final JSONObject jsonObject = new JSONObject(jdata);
                et_add_name.setText(jsonObject.get("name").toString().trim());
                et_add_company.setText(jsonObject.get("company").toString().trim());
                et_add_phno.setText(jsonObject.get("mobileNo").toString().trim());
                et_add_email.setText(jsonObject.get("email").toString().trim());
                et_add_title.setText(jsonObject.get("jobTitle").toString().trim());
                et_add_homepage.setText(jsonObject.get("homePage").toString().trim());
                et_add_address.setText(jsonObject.get("addressline1").toString().trim());
                et_add_whomToMeet.setText(jsonObject.get("whomToMeet").toString().trim());
                et_add_scannedDate.setText(jsonObject.get("visitedDateTime").toString().trim());
                selectedId = jsonObject.get("cardId").toString().trim();
                //Override details
                if (jsonObject.get("isOverridden").toString().trim().equals("true")) {
                    overrideData = jsonObject.get("overrideDetails").toString().trim();
                    btn_overRidden.setVisibility(View.VISIBLE);
                } else {
                    btn_overRidden.setVisibility(View.GONE);
                }
                if (jsonObject.get("cardImage").toString().trim().equals("")) {
                    iv_businessCard_captured.setImageDrawable(getResources().getDrawable(R.drawable.default_card));
                } else {
                    Picasso.with(VisitorDetails.this).load(jsonObject.get("cardImage").toString().trim()).placeholder(R.drawable.default_card).resize(320, 300).into(iv_businessCard_captured);
                }
                iv_businessCard_captured.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        ImageView iv = new ImageView(VisitorDetails.this);
                        try {
                            if (!jsonObject.get("cardImage").toString().trim().equals("")) {
                                Picasso.with(VisitorDetails.this).load(jsonObject.get("cardImage").toString().trim()).placeholder(R.drawable.default_card).resize(320, 300).into(iv);
                            } else {
                                iv.setImageDrawable(getResources().getDrawable(R.drawable.default_card));
                            }
                            new AlertDialog.Builder(VisitorDetails.this)
                                    .setView(iv)
                                    .show();
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });


                et_add_name.setEnabled(false);
                et_add_company.setEnabled(false);
                et_add_phno.setEnabled(false);
                et_add_email.setEnabled(false);
                et_add_title.setEnabled(false);
                et_add_homepage.setEnabled(false);
                et_add_address.setEnabled(false);
                et_add_whomToMeet.setEnabled(false);
                et_add_scannedDate.setEnabled(false);
            } else {
                btn_verify.setText("DONE");
                et_add_name.setEnabled(true);
                et_add_company.setEnabled(true);
                et_add_phno.setEnabled(true);
                et_add_email.setEnabled(true);
                et_add_title.setEnabled(true);
                et_add_homepage.setEnabled(true);
                et_add_address.setEnabled(true);
                et_add_whomToMeet.setEnabled(true);
                et_add_scannedDate.setEnabled(true);
                ll_add_scannedDate.setVisibility(View.GONE);
            }
        } catch (JSONException j) {

        }
    }

    private void findViews() {
        btn_verify = (Button) findViewById(R.id.btn_verify);
        btn_verify.setOnClickListener(this);
        btn_verify.setBackgroundColor(Color.parseColor(primary_color));
        btn_overRidden = (Button) findViewById(R.id.btn_overRidden);
        btn_overRidden.setOnClickListener(this);
        btn_overRidden.setBackgroundColor(Color.parseColor(primary_color));
        et_add_name = (EditText) findViewById(R.id.et_add_name);
        et_add_company = (EditText) findViewById(R.id.et_add_company);
        et_add_phno = (EditText) findViewById(R.id.et_add_phno);
        et_add_email = (EditText) findViewById(R.id.et_add_email);
        et_add_title = (EditText) findViewById(R.id.et_add_title);
        et_add_homepage = (EditText) findViewById(R.id.et_add_homepage);
        et_add_address = (EditText) findViewById(R.id.et_add_address);
        et_add_whomToMeet = (AutoCompleteTextView) findViewById(R.id.et_add_whomToMeet);
        et_add_whomToMeet_email= (EditText) findViewById(R.id.et_add_whomToMeet_email);
        et_add_whomTomeet_phno= (EditText) findViewById(R.id.et_add_whomToMeet_phno);
        et_add_whomTomeet_role= (EditText) findViewById(R.id.et_add_whomToMeet_Emprole);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>
                (this,android.R.layout.select_dialog_item,APICalls.getEmployeeNameList());
        et_add_whomToMeet.setThreshold(2);//will start working from first character
        et_add_whomToMeet.setAdapter(adapter);
        /*et_add_whomToMeet.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                InputMethodManager imm = (InputMethodManager) getSystemService(
                        INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
                Log.e("selected emp name"+APICalls.getEmployeeNameList().get(i),":id"+APICalls.getEmployeeIDList().get(i));
                getEmployeeDetails(APICalls.getEmployeeIDList().get(i));
            }
        });
*/
        et_add_whomToMeet.setOnItemClickListener(new AdapterView.OnItemClickListener(){

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long rowId) {

                //here position is your selected item id


                String selection = (String) parent.getItemAtPosition(position);
                int pos = -1;
                ArrayList<String> empNamelist=APICalls.getEmployeeNameList();
                for (int i = 0; i < empNamelist.size(); i++) {
                    if (empNamelist.get(i).equals(selection)) {
                        pos = i;
                        break;
                    }
                }
                System.out.println("Position " + pos); //check it now in Logcat

                InputMethodManager imm = (InputMethodManager) getSystemService(
                        INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
                Log.e("selected emp name"+APICalls.getEmployeeNameList().get(pos),":id"+APICalls.getEmployeeIDList().get(pos));
                getEmployeeDetails(APICalls.getEmployeeIDList().get(pos));


            }
        });
        /*et_add_whomToMeet.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                InputMethodManager imm = (InputMethodManager) getSystemService(
                        INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);

            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });*/

        et_add_scannedDate = (EditText) findViewById(R.id.et_add_scannedDate);
        ll_add_scannedDate = (LinearLayout) findViewById(R.id.ll_add_scannedDate);
        iv_businessCard_captured = (ImageView) findViewById(R.id.iv_businessCard_captured);
        spinner_departments= (Spinner) findViewById(R.id.spinner_dept);
        departmentsList=new ArrayList<String>();
        try {
            departmentsList = APICalls.getcenterBasedDeptNameList(VisitorDetails.this);
        }catch (Exception e)
        {
            e.toString();
        }
        ArrayAdapter<String> deptAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, departmentsList);
        // Drop down layout style - list view with radio button
        deptAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner_departments.setAdapter(deptAdapter);
        Log.e("selctegetDeptsIDList",":"+APICalls.getcenterBasedDeptIDList(VisitorDetails.this));
        Log.e("selcted departmen id",":"+APICalls.getSelectedDepartmentID(this));
        Log.e("selcted departmen id",":"+APICalls.getcenterBasedDeptIDList(VisitorDetails.this).contains(APICalls.getSelectedDepartmentID(this)));
        spinner_departments.setSelection(APICalls.getcenterBasedDeptIDList(VisitorDetails.this).indexOf(APICalls.getSelectedDepartmentID(this)));


        spinner_departments.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
//                    Toast.makeText(getApplicationContext(),"selected item"+departmentsList.get(i),Toast.LENGTH_SHORT).show();
                try{
                    selectedDeptID=APICalls.getcenterBasedDeptIDList(VisitorDetails.this).get(i);
                    selectedDeptName=APICalls.getcenterBasedDeptNameList(VisitorDetails.this).get(i);

                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
        Common.clearErrorMask(et_add_name);
    }

    private void getEmployeeDetails(String employeeID) {
        APICalls.employeeID=employeeID;
        final ProgressDialog pDialog = new ProgressDialog(this);
        pDialog.setMessage("Loading...");
        pDialog.setCancelable(false);
        if(!pDialog.isShowing())
        pDialog.show();
        StringEntity entity = null;
        try {
            JSONObject js = new JSONObject();
            js.put("id", employeeID);
            System.out.println("js::" + js.toString());
            entity = new StringEntity(js.toString());
            List<Header> headers = NetworkAdapter.getHeaders(this);
            JsonHttpResponseHandler reponseHandler = new JsonHttpResponseHandler() {

                @Override
                public void onSuccess(int statusCode, Header[] headers,
                                      JSONObject response) {
                    System.out.println("employee data by ID-response" + response);
                    try {
                        if(pDialog.isShowing()){
                            pDialog.dismiss();
                        }
                        if (response.getString("statusCode").toString().trim().equals("200")) {
                            //Code for getting employee list
                            et_add_whomTomeet_phno.setText(response.getJSONObject("data").getString("empMobile"));
                            et_add_whomToMeet_email.setText(response.getJSONObject("data").getString("empEmail"));
                            et_add_whomTomeet_role.setText(response.getJSONObject("data").getString("empRole"));

                        } else if(response.getString("statusCode").toString().trim().equals("404")){
                            Common.gotoLoginPage(VisitorDetails.this);
                        } else  {
                            new AlertDialog.Builder(VisitorDetails.this)
                                    .setTitle("Business card Verification")
                                    .setMessage("Something is not right here now, Please feel free to close the app and come back later")
                                    .setIcon(R.drawable.menu_app_icon)
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                        }
                                    })
                                    .show();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
                    super.onFailure(statusCode, headers, responseString, throwable);
                    if(pDialog.isShowing()){
                        pDialog.dismiss();
                    }
                    System.out.println("response" + responseString);
                    Intent in = new Intent(VisitorDetails.this, HomeVistorsList.class);
                    startActivity(in);
                }

                @Override
                public void onFailure(int statusCode, Header[] headers,
                                      Throwable throwable, JSONObject errorResponse) {
                    if(pDialog.isShowing()){
                        pDialog.dismiss();
                    }
                    System.out.println("errorResponse" + errorResponse);
                    super.onFailure(statusCode, headers, throwable,
                            errorResponse);

                }
            };

            NetworkAdapter.postWithHttpHeader(VisitorDetails.this, APICalls.URL_getEmployeeWithID,
                    entity, "application/json", reponseHandler, headers);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*   // And the corresponding Adapter
       private class AutoCompleteAdapter extends ArrayAdapter<String> implements Filterable {

           private LayoutInflater mInflater;
           private StringBuilder mSb = new StringBuilder();

           public AutoCompleteAdapter(final Context context) {
               super(context, -1);
               mInflater = LayoutInflater.from(context);
           }

           @Override
           public View getView(final int position, final View convertView, final ViewGroup parent) {
               final TextView tv;
               if (convertView != null) {
                   tv = (TextView) convertView;
               } else {
                   tv = (TextView) mInflater.inflate(android.R.layout.simple_dropdown_item_1line, parent, false);
               }

               tv.setText(createFormattedAddressFromAddress(APICalls.getEmployeeNameList().get(position)));
               return tv;
           }

           private String createFormattedAddressFromAddress(final String address) {


               return address;
           }

           @Override
           public Filter getFilter() {
               Filter myFilter = new Filter() {
                   @Override
                   protected FilterResults performFiltering(final CharSequence constraint) {
                       ArrayList<String> addressList = null;
                       if (constraint != null) {

                               addressList =getSearchResults(addressList,constraint);

                       }
                       if (addressList == null) {
                           addressList = new ArrayList<String>();
                       }

                       final FilterResults filterResults = new FilterResults();
                       filterResults.values = addressList;
                       filterResults.count = addressList.size();

                       return filterResults;
                   }

                   @SuppressWarnings("unchecked")
                   @Override
                   protected void publishResults(final CharSequence contraint, final FilterResults results) {
                       clear();
                       for (String address : (List<String>) results.values) {
                           add(address);
                       }
                       if (results.count > 0) {
                           notifyDataSetChanged();
                       } else {
                           notifyDataSetInvalidated();
                       }
                   }

                   @Override
                   public CharSequence convertResultToString(final Object resultValue) {
                       return resultValue == null ? "" : ((String) resultValue);
                   }
               };
               return myFilter;
           }
       }

       private ArrayList<String> getSearchResults(ArrayList<String> addressList, CharSequence constraint) {

           ArrayList<String> resultlist=new ArrayList<String>();
           for(int i=0;i<addressList.size();i++)
           {
               if(addressList.get(i).contains(constraint))
               {
                   resultlist.add(addressList.get(i));
               }
           }

           return  resultlist;
       }
   */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (jdata.trim().equals("")) {
            getMenuInflater().inflate(R.menu.menu_addvisitor, menu);
        } else {
            getMenuInflater().inflate(R.menu.menu_home, menu);
        }
        return super.onCreateOptionsMenu(menu);
    }

    Uri mImageCaptureUri;

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.action_camera) {
            //Open camera and use OCR SDK
           /* Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
            Uri fileUri = getOutputMediaFileUri(); // create a file to save the image
            intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); // set the image file name
            startActivityForResult(intent, 123);*/

            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

            mImageCaptureUri = getOutputMediaFileUri();
            imageFilePath = mImageCaptureUri.getPath();
            intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, mImageCaptureUri);

            try {
                intent.putExtra("return-data", true);

                startActivityForResult(intent, 123);
            } catch (ActivityNotFoundException e) {
                e.printStackTrace();
            }


        } else if (item.getItemId() == R.id.action_home) {
            Intent in = new Intent(VisitorDetails.this, HomeVistorsList.class);
            startActivity(in);
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case 123:
               /* Bundle extras = data.getExtras();
                imageFilePath = getOutputMediaFileUri().getPath();
                File imgFile = new File(imageFilePath);
                if (imgFile.exists()) {
                    if(extras != null ) {
                        Bitmap photo = extras.getParcelable("data");
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        photo.compress(Bitmap.CompressFormat.JPEG, 75, stream);

                    }*/
                Bitmap myBitmap = BitmapFactory.decodeFile(imageFilePath);
                Bitmap resizedbitmap = Bitmap.createScaledBitmap(myBitmap, 200, 200, true);
                iv_businessCard_captured.setImageBitmap(resizedbitmap);
                et_add_name.setText("");
                et_add_company.setText("");
                et_add_phno.setText("");
                et_add_email.setText("");
                et_add_title.setText("");
                et_add_homepage.setText("");
                et_add_address.setText("");
                et_add_whomToMeet.setText("");
                new AsyncProcessTask(this).execute(imageFilePath, resultUrl);

                doCrop();//sai
                break;
            case 321:
                Bundle extras = data.getExtras();
                if (extras != null) {
                    Bitmap photo = extras.getParcelable("data");
                    iv_businessCard_captured.setImageBitmap(photo);
                }
                File f = new File(mImageCaptureUri.getPath());
                //  if (f.exists()) f.delete();
                new AsyncProcessTask(this).execute(imageFilePath, resultUrl);
                break;


        }
        //System.out.println("Image path:" + imageFilePath);
        //new AsyncProcessTask(this).execute(imageFilePath, resultUrl);
    }


    private void doCrop() {
        final ArrayList<CropOption> cropOptions = new ArrayList<CropOption>();
        Intent intent = new Intent("com.android.camera.action.CROP");
        intent.setType("image/*");
        List<ResolveInfo> list = getPackageManager().queryIntentActivities(intent, 0);
        int size = list.size();
        Log.e("size",":"+size);
        if (size == 0) {
            Toast.makeText(this, "Can not find image crop app", Toast.LENGTH_SHORT).show();
            return;
        } else {
            intent.setData(mImageCaptureUri);
   /*         intent.putExtra("outputX", 512);
            intent.putExtra("outputY", 512);*/
            intent.putExtra("aspectX", 0);
            intent.putExtra("aspectY", 0);
            intent.putExtra("scale", true);
            intent.putExtra("return-data", true);

            if (size == 1) {
                Intent i = new Intent(intent);
                ResolveInfo res = list.get(0);

                i.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));

                startActivityForResult(i, 321);
            } else {
                for (ResolveInfo res : list) {
                    final CropOption co = new CropOption();

                    co.title = getPackageManager().getApplicationLabel(res.activityInfo.applicationInfo);
                    co.icon = getPackageManager().getApplicationIcon(res.activityInfo.applicationInfo);
                    co.appIntent = new Intent(intent);
                    co.appIntent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));
                    cropOptions.add(co);
                }

                CropOptionAdapter adapter = new CropOptionAdapter(getApplicationContext(), cropOptions);

                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Choose Crop App");
                builder.setAdapter(adapter, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int item) {
                        startActivityForResult(cropOptions.get(item).appIntent, 321);
                    }
                });

                builder.setOnCancelListener(new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {

                        if (mImageCaptureUri != null) {
                            getContentResolver().delete(mImageCaptureUri, null, null);
                            mImageCaptureUri = null;
                        }
                    }
                });

                AlertDialog alert = builder.create();

                alert.show();
            }
        }
    }

    @Override
    public void onClick(View v) {
        if (v == btn_verify) {
            if (et_add_name.getText().toString().trim().equals("")) {
                et_add_name.requestFocus();
                et_add_name.setError("Please Enter Name:");
            }
            else if (et_add_company.getText().toString().trim().equals("")) {
                et_add_company.requestFocus();
                et_add_company.setError("Please Enter Company Name");
            }else if (et_add_whomToMeet.getText().toString().trim().equals("")) {
                et_add_whomToMeet.requestFocus();
                et_add_whomToMeet.setError("Please Enter Whom To Meet:");
            } else {
                if (btn_verify.getText().toString().toLowerCase().trim().equals("done")) {
                    vm = new VisitorModel();
                    vm.setName(et_add_name.getText().toString().trim());
                    vm.setCompany(et_add_company.getText().toString().trim());
                    vm.setPhno(et_add_phno.getText().toString().trim());
                    vm.setEmail(et_add_email.getText().toString().trim());
                    vm.setTitle(et_add_title.getText().toString().trim());
                    vm.setHomePage(et_add_homepage.getText().toString().trim());
                    vm.setAddress(et_add_address.getText().toString().trim());
                    vm.setWhomToMeet(et_add_whomToMeet.getText().toString().trim());
                    vm.setEmpEmail(et_add_whomToMeet_email.getText().toString().trim());
                    vm.setEmpPhno(et_add_whomTomeet_phno.getText().toString().trim());
                    vm.setEmpRole(et_add_whomTomeet_role.getText().toString().trim());
                    vm.setDeptID(selectedDeptID);
                    vm.setDeptName(selectedDeptName);
                    vm.setJdata(jdata);
                    if (!imageFilePath.trim().equals("")) {
                        vm.setIsImageTaken(true);
                        vm.setImagePath(imageFilePath);
                    }
                    APICalls.vm = vm;
                    Intent intent = new Intent(this, VisitorDetailsDisplay.class);
                    startActivity(intent);
                } else if (btn_verify.getText().toString().toLowerCase().trim().equals("revisit")) {
                    //revisit
                    AlertDialog.Builder alert = new AlertDialog.Builder(this);
                    final AutoCompleteTextView edittext = new AutoCompleteTextView(this);
                    edittext.setHint("Whom to Meet");
                    ArrayAdapter<String> adapter = new ArrayAdapter<String>
                            (this,android.R.layout.select_dialog_item,APICalls.getEmployeeNameList());
                    edittext.setThreshold(2);//will start working from first character
                    edittext.setDropDownHeight(500);
                    edittext.setAdapter(adapter);

                    edittext.setOnItemClickListener(new AdapterView.OnItemClickListener(){

                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long rowId) {
                            //here position is your selected item id
                            String selection = (String) parent.getItemAtPosition(position);
                            int pos = -1;
                            ArrayList<String> empNamelist=APICalls.getEmployeeNameList();
                            for (int i = 0; i < empNamelist.size(); i++) {
                                if (empNamelist.get(i).equals(selection)) {
                                    pos = i;
                                    break;
                                }
                            }
                            System.out.println("Position " + pos); //check it now in Logcat

                            InputMethodManager imm = (InputMethodManager) getSystemService(
                                    INPUT_METHOD_SERVICE);
                            imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
                            Log.e("selected emp name"+APICalls.getEmployeeNameList().get(pos),":id"+APICalls.getEmployeeIDList().get(pos));
                            getEmployeeDetails(APICalls.getEmployeeIDList().get(pos));


                        }
                    });
                    alert.setMessage("Whom to Meet:");
                    alert.setTitle("Business Card Verification");
                    alert.setCancelable(false);
                    alert.setView(edittext);
                    alert.setIcon(R.drawable.menu_app_icon);

                    alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            et_add_whomToMeet.setText(edittext.getText().toString().trim());
                            btn_verify.setText("VERIFY");
                        }
                    });

                    alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {

                        }
                    });

                    alert.show();
                } else {
                    if(Common.isNetworkAvailable(VisitorDetails.this)) {
                        sendRevisitDetails(selectedId);
                    }else
                    {
                        Common.alertDialog(VisitorDetails.this,"No internet connection.Please check the internet connection");
                    }
                }
            }
        } else if (v == btn_overRidden) {
            String data = "";
            try {
                JSONObject jobj = new JSONObject(overrideData);
                data = "Name: " + jobj.getString("name") + "\n" + "Email: " + jobj.getString("email") + "\n" + "Mobile No.: " + jobj.getString("mobileNo");
            } catch (JSONException j) {
            }
            AlertDialog adb = new AlertDialog.Builder(this)
                    .setTitle("Business card Verification")
                    .setMessage(data)
                    .setIcon(R.drawable.menu_app_icon)
                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                        }
                    })
                    .show();
        }
    }

    private void sendRevisitDetails(String id) {
        try {
            final ProgressDialog pDialog = new ProgressDialog(this);
            pDialog.setMessage("Loading...");
            pDialog.setCancelable(false);
            if(!pDialog.isShowing())
            pDialog.show();
            StringEntity entity = null;
            JSONObject json = new JSONObject();
            json.put("whomToMeet", et_add_whomToMeet.getText().toString().trim());
            json.put("id", id);
            json.put("timeZone", TimeZone.getDefault().getID());
            System.out.println("resuest json::" + json);
            entity = new StringEntity(json.toString());

            List<Header> headers = NetworkAdapter.getHeadersWithGovtAPI(this);
            JsonHttpResponseHandler reponseHandler = new JsonHttpResponseHandler() {

                @Override
                public void onSuccess(int statusCode, Header[] headers,JSONObject response) {
                    System.out.println("response" + response);
                    if(pDialog.isShowing()){
                        pDialog.dismiss();
                    }
                    try {
                        if (response.getString("statusCode").toString().trim().equals("200")) {
                            vm = new VisitorModel();
                            vm.setJdata(jdata);
                            JSONObject json = response.getJSONObject("data");
                            vm.setVisitorId(json.getString("visitorId").toString().trim());
                            APICalls.vm = vm;
                            if (json.getString("isRecordFound").toString().trim().equals("true")) {
                                new AlertDialog.Builder(VisitorDetails.this)
                                        .setTitle("Business card Verification")
                                        .setMessage("Details Matched\n Do You Want Override?")
                                        .setIcon(R.drawable.menu_app_icon)
                                        .setPositiveButton("Continue", new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int which) {
                                                Intent in = new Intent(VisitorDetails.this, Overridden.class);
                                                startActivity(in);
                                            }
                                        })
                                        .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int which) {

                                            }
                                        })
                                        .show();
                            } else {
                                Intent in = new Intent(VisitorDetails.this, IssueBadge.class);
                                startActivity(in);
                            }
                        }else if(response.getString("statusCode").toString().trim().equals("404")){
                            Common.gotoLoginPage(VisitorDetails.this);
                        } else {
                            new AlertDialog.Builder(VisitorDetails.this)
                                    .setTitle("Business card Verification")
                                    .setMessage(response.getString("statusMessage").toString().trim())
                                    .setIcon(R.drawable.menu_app_icon)
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                        }
                                    })
                                    .show();
                        }
                    } catch (JSONException je) {
                        je.printStackTrace();
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers,
                                      Throwable throwable, JSONObject errorResponse) {
                    System.out.println("errorResponse" + errorResponse);
                    super.onFailure(statusCode, headers, throwable,
                            errorResponse);

                    if(pDialog.isShowing()){
                        pDialog.dismiss();
                    }
                }
            };
            NetworkAdapter.postWithHttpHeader(VisitorDetails.this, APICalls.URL_reVerifyVisitor,
                    entity, "application/json", reponseHandler, headers);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateResults(Boolean success) {
        if (!success)
            return;
        try {
            StringBuffer contents = new StringBuffer();

            FileInputStream fis = openFileInput(resultUrl);
            try {
                Reader reader = new InputStreamReader(fis, "UTF-8");
                BufferedReader bufReader = new BufferedReader(reader);
                String text = null;
                int i = 0;
                while ((text = bufReader.readLine()) != null) {
                    contents.append(text).append(
                            System.getProperty("line.separator"));

                    //System.out.println("i=" + i + ":::::::::" + text);
                    updateTextData(text);

                    i++;
                }
            } finally {
                fis.close();
                dialog.dismiss();

            }
            // Document doc = getDomElement(contents.toString()); // getting DOM element
            // updateTextData(doc);


            //System.out.println("contents::::::" + contents.toString());
           /* String data=contents.toString();
                String[] dataAry=data.split("//\n");
            if (data.startsWith("N;CHARSET=utf-8:")){
                et_add_name.setText(data.substring(data.indexOf("N;CHARSET=utf-8:")+1));
            }*/
            // displayMessage(contents.toString());
        } catch (Exception e) {
            //displayMessage("Error: " + e.getMessage());
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void updateTextData(String text) {
        Log.e("text data  ", text);
        //  NodeList nl = doc.getElementsByTagName("Phone");
        if (text.startsWith("N;CHARSET=utf-8")) {
            et_add_name.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("TEL;CHARSET=utf-8")) {
            et_add_phno.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("EMAIL;CHARSET=utf-8:")) {
            et_add_email.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("ORG;CHARSET=utf-8")) {
            et_add_company.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("TITLE;CHARSET=utf-8")) {
            et_add_title.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("URL;CHARSET=utf-8")) {
            et_add_homepage.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
        if (text.startsWith("ADR;CHARSET=utf-8")) {
            et_add_address.setText(text.substring(text.indexOf(":") + 1).replace(';', ' '));
        }
    }

    public Document getDomElement(String xml) {
        Document doc = null;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        try {

            DocumentBuilder db = dbf.newDocumentBuilder();

            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(xml));
            doc = db.parse(is);

        } catch (ParserConfigurationException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        } catch (SAXException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        } catch (IOException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        }
        // return DOM
        return doc;
    }

    public String getValue(Element item, String str) {
        NodeList n = item.getElementsByTagName(str);
        return this.getElementValue(n.item(0));
    }

    public final String getElementValue(Node elem) {
        Node child;
        if (elem != null) {
            if (elem.hasChildNodes()) {
                for (child = elem.getFirstChild(); child != null; child = child.getNextSibling()) {
                    if (child.getNodeType() == Node.TEXT_NODE) {
                        return child.getNodeValue();
                    }
                }
            }
        }
        return "";
    }

    public class AsyncProcessTask extends AsyncTask<String, String, Boolean> {
        public AsyncProcessTask(Context ctx) {
            if(dialog==null)
                dialog = new ProgressDialog(ctx);
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            dialog.setMessage("Processing");
            dialog.setCancelable(false);
            dialog.setCanceledOnTouchOutside(false);
            if(!dialog.isShowing())
                dialog.show();
        }

        @Override
        protected Boolean doInBackground(String... params) {
            String inputFile = params[0];
            String outputFile = params[1];
            try {
                Client restClient = new Client();
                restClient.applicationId = "VisitorTracking";
                restClient.password = "ZLIMMJRpqFGdQ9OJRXEytTWc";

                // Obtain installation id when running the application for the first time
                SharedPreferences settings = getPreferences(Activity.MODE_PRIVATE);
                String instIdName = "installationId";
                if (!settings.contains(instIdName)) {
                    // Get installation id from server using device id
                    String deviceId = Common.getDevicetoken(VisitorDetails.this);

                    // Obtain installation id from server
                    publishProgress("First run: obtaining installation id..");
                    String installationId = restClient.activateNewInstallation(deviceId);
                    publishProgress("Done. Installation id is '" + installationId + "'");

                    SharedPreferences.Editor editor = settings.edit();
                    editor.putString(instIdName, installationId);
                    editor.commit();
                }

                String installationId = settings.getString(instIdName, "");
                restClient.applicationId += installationId;

                publishProgress("Uploading image...");

                String language = "English";
                BusCardSettings busCardSettings = new BusCardSettings();
                busCardSettings.setLanguage(language);
                busCardSettings.setOutputFormat(BusCardSettings.OutputFormat.vCard);
                Task task = restClient.processBusinessCard(inputFile, busCardSettings);
                publishProgress("Uploading..");
                while (task.isTaskActive()) {
                    // Note: it's recommended that your application waits
                    // at least 2 seconds before making the first getTaskStatus request
                    // and also between such requests for the same task.
                    // Making requests more often will not improve your application performance.
                    // Note: if your application queues several files and waits for them
                    // it's recommended that you use listFinishedTasks instead (which is described
                    // at http://ocrsdk.com/documentation/apireference/listFinishedTasks/).

                    Thread.sleep(5000);
                    publishProgress("Waiting..");
                    task = restClient.getTaskStatus(task.Id);
                }

                if (task.Status == Task.TaskStatus.Completed) {
                    publishProgress("Downloading..");
                    FileOutputStream fos = openFileOutput(outputFile, Context.MODE_PRIVATE);

                    try {
                        restClient.downloadResult(task, fos);
                    } finally {
                        fos.close();
                    }
                    publishProgress("Ready");
                } else if (task.Status == Task.TaskStatus.NotEnoughCredits) {
                    throw new Exception("Not enough credits to process task. Add more pages to your application's account.");
                } else {
                    throw new Exception("Task failed");
                }

                return true;
            } catch (Exception e) {
                final String message = "Error: " + e.getMessage();
                publishProgress(message);
                System.out.println("message::::" + message);
                return false;
            }
        }

        @Override
        protected void onPostExecute(Boolean result) {
            super.onPostExecute(result);
            if (dialog.isShowing()) {
                dialog.dismiss();
            }
            dialog.dismiss();
            updateResults(result);
        }
    }
}
