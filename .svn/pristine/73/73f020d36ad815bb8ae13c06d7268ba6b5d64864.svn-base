package com.perigrine.businesscardverification;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.perigrine.Helper.APICalls;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class ApplyFilters extends AppCompatActivity implements View.OnClickListener {
    String primary_color;
    String secondary_color;
    String logo_url;
    private TextView tv_filters_asc, tv_filters_advanced;
    private RadioGroup rg_quickFilters;
    private String[] filter_labelAry = new String[]{"All", "Filter by Overridden", "Filter by Matches Found", "Filter by Issued", "Filter by Verified", "Filter by Red Badge", "Filter by Blue Badge"};
    private RadioButton[] filter_rbAry = new RadioButton[filter_labelAry.length];

    private static EditText et_filter_startDate, et_filter_endDate,et_filter_name, et_filter_company;
    private Button btn_filter_apply;
    private ImageButton dateStartTmage, dateEndImage;
    static boolean flag;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.applyfilters);
        SharedPreferences sharedPreferences = getSharedPreferences("new_theme", MODE_PRIVATE);
        primary_color = sharedPreferences.getString("primary_Color", "#F00025");
        secondary_color = sharedPreferences.getString("secondary_Color", "#aaaaaa");
        logo_url = sharedPreferences.getString("org_Logo", "");
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setBackgroundColor(Color.parseColor(primary_color));
        setSupportActionBar(toolbar);
        findViews();
        updateQuickFilters();
        if (APICalls.filterPosition != 99) {
            filter_rbAry[APICalls.filterPosition].setChecked(true);
        } else {
            for (int i = 0; i < filter_labelAry.length; i++) {
                filter_rbAry[i].setChecked(false);
            }
        }
        //Back Button for toolbar
        toolbar.setNavigationIcon(getResources().getDrawable(R.drawable.backnav));
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //What to do on back clicked
                finish();
            }
        });
        tv_filters_asc.setText(APICalls.sortStr);
    }

    private void updateQuickFilters() {
        rg_quickFilters.removeAllViews();
        for (int i = 0; i < filter_labelAry.length; i++) {
            filter_rbAry[i] = new RadioButton(this);
            filter_rbAry[i].setText(filter_labelAry[i]);
            filter_rbAry[i].setPadding(5, 5, 5, 5);
            filter_rbAry[i].setTextColor(Color.parseColor("#000000"));
            filter_rbAry[i].setId(i);

            filter_rbAry[i].setOnCheckedChangeListener(new RadioButton.OnCheckedChangeListener() {

                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    int buttonViewID = buttonView.getId();
                    try {
                        if (APICalls.filterPosition != buttonViewID) {
                            if (isChecked) {
                                if (buttonViewID == 0) {
                                    APICalls.filterRequesKey = null;
                                    APICalls.filterPosition = 0;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 1) {
                                    APICalls.filterRequesKey = "overriden";
                                    APICalls.filterPosition = 1;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 2) {
                                    APICalls.filterRequesKey = "recordMatched";
                                    APICalls.filterPosition = 2;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 3) {
                                    APICalls.filterRequesKey = "issued";
                                    APICalls.filterPosition = 3;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 4) {
                                    APICalls.filterRequesKey = "verified";
                                    APICalls.filterPosition = 4;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 5) {
                                    APICalls.filterRequesKey = "badgeType";
                                    APICalls.filterPosition = 5;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                } else if (buttonViewID == 6) {
                                    APICalls.filterRequesKey = "badgeType";
                                    APICalls.filterPosition = 6;
                                    finish();
                                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                                    startActivity(intent);
                                }

                               APICalls.advanceFilterJsonRequest = null;
                            }

                        }
                    } catch (Exception je) {
                        je.printStackTrace();
                    }
                }
            });
            rg_quickFilters.addView(filter_rbAry[i]);
        }
    }

    private void findViews() {
        rg_quickFilters = (RadioGroup) findViewById(R.id.rg_quickFilters);
        tv_filters_asc = (TextView) findViewById(R.id.tv_filters_asc);
        tv_filters_asc.setOnClickListener(this);
        tv_filters_advanced = (TextView) findViewById(R.id.tv_filters_advanced);
        tv_filters_advanced.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        if (v == tv_filters_asc) {
            showSortDialog();
        } else if (v == tv_filters_advanced) {
            showAdvanceFiltersDialog();
        }
    }

    private void showSortDialog() {
        LayoutInflater factory = LayoutInflater.from(this);
        final View deleteDialogView = factory.inflate(R.layout.sort, null);
        final AlertDialog sortDialog = new AlertDialog.Builder(this).create();
        sortDialog.setView(deleteDialogView);
        sortDialog.setTitle("Sort");
        Button btn_sort_apply = (Button) deleteDialogView.findViewById(R.id.btn_sort_apply);
        btn_sort_apply.setBackgroundColor(Color.parseColor(primary_color));
        final RadioButton rb_sort_nameAsc, rb_sort_nameDsc, rb_sort_companyAsc, rb_sort_companyDsc, rb_sort_dateAsc, rb_sort_dateDsc;

        rb_sort_nameAsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_nameAsc);
        rb_sort_nameDsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_nameDsc);
        rb_sort_companyAsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_companyAsc);
        rb_sort_companyDsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_companyDsc);
        rb_sort_dateAsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_dateAsc);
        rb_sort_dateDsc = (RadioButton) deleteDialogView.findViewById(R.id.rb_sort_dateDsc);


        if (APICalls.sortPosition == 1) {
            rb_sort_nameAsc.setChecked(true);
        } else if (APICalls.sortPosition == 2) {
            rb_sort_nameDsc.setChecked(true);
        } else if (APICalls.sortPosition == 3) {
            rb_sort_companyAsc.setChecked(true);
        } else if (APICalls.sortPosition == 4) {
            rb_sort_companyDsc.setChecked(true);
        } else if (APICalls.sortPosition == 5) {
            rb_sort_dateAsc.setChecked(true);
        } else if (APICalls.sortPosition == 6) {
            rb_sort_dateDsc.setChecked(true);
        }

        btn_sort_apply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (rb_sort_nameAsc.isChecked()) {
                    APICalls.sortPosition = 1;
                    APICalls.sortStr = "Name ASC";

                    if (APICalls.filterPosition != 99) {
                        filter_rbAry[APICalls.filterPosition].setChecked(true);
                    } else {
                        for (int i = 0; i < filter_labelAry.length; i++) {
                            filter_rbAry[i].setChecked(false);
                        }
                    }

                } else if (rb_sort_nameDsc.isChecked()) {
                    APICalls.sortPosition = 2;
                    APICalls.sortStr = "Name DSC";
                } else if (rb_sort_companyAsc.isChecked()) {
                    APICalls.sortPosition = 3;
                    APICalls.sortStr = "Company ASC";
                } else if (rb_sort_companyDsc.isChecked()) {
                    APICalls.sortPosition = 4;
                    APICalls.sortStr = "Company DSC";
                } else if (rb_sort_dateAsc.isChecked()) {
                    APICalls.sortPosition = 5;
                    APICalls.sortStr = "Date ASC";
                } else if (rb_sort_dateDsc.isChecked()) {
                    APICalls.sortPosition = 6;
                    APICalls.sortStr = "Date DSC";
                }
                finish();
                sortDialog.dismiss();
                Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                startActivity(intent);
            }
        });
        sortDialog.show();
    }

    private static void setStartDate(String date){
        et_filter_startDate.setText(date);
        et_filter_startDate.setEnabled(false);
    }

    private static void setEndDate(String date){
        et_filter_endDate.setText(date);
        et_filter_endDate.setEnabled(false);
    }

    private void launchDatePicker(boolean value){
        flag = value;
        DialogFragment newFragment = new DatePickerFragment();
        newFragment.show(getSupportFragmentManager(), "datePicker");
    }

    public static class DatePickerFragment extends DialogFragment implements DatePickerDialog.OnDateSetListener {

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            final Calendar c = Calendar.getInstance();
            int year = c.get(Calendar.YEAR);
            int month = c.get(Calendar.MONTH);
            int day = c.get(Calendar.DAY_OF_MONTH);

            DatePickerDialog dialog = new DatePickerDialog(getActivity(), this, year, month, day);

            dialog.getDatePicker().updateDate(year,month,day);
            return dialog;
        }

        public void onDateSet(DatePicker view, int year, int month, int day) {
            String _day = Integer.toString(day);
            String _month = Integer.toString(month);
            String _year = Integer.toString(year);

            if(day<10){
                _day = "0"+_day;
            }

            if(month<10){
                _month = "0"+_month;
            }

            String date = _day+"-"+_month+"-"+year;

            if(flag) {
                setStartDate(date);
            } else {
                setEndDate(date);
            }
        }
    }

    private void showAdvanceFiltersDialog() {
        LayoutInflater factory = LayoutInflater.from(this);

        final View advanceFilterDialog = factory.inflate(R.layout.advanced_filters, null);
        final AlertDialog filterDialog = new AlertDialog.Builder(this).create();

        filterDialog.setView(advanceFilterDialog);
        filterDialog.setTitle("Advance Filters");

        btn_filter_apply = (Button) advanceFilterDialog.findViewById(R.id.btn_filter_apply);
        btn_filter_apply.setBackgroundColor(Color.parseColor(primary_color));

        // Get all EditText

        et_filter_name = (EditText) advanceFilterDialog.findViewById(R.id.et_filter_name);
        et_filter_name.setBackground(APICalls.getDrawable(et_filter_name, primary_color));

        et_filter_company = (EditText) advanceFilterDialog.findViewById(R.id.et_filter_companyName);
        et_filter_company.setBackground(APICalls.getDrawable(et_filter_company, primary_color));

        et_filter_startDate = (EditText) advanceFilterDialog.findViewById(R.id.et_filter_startDate);
        et_filter_startDate.setBackground(APICalls.getDrawable(et_filter_startDate, primary_color));

        et_filter_endDate = (EditText) advanceFilterDialog.findViewById(R.id.et_filter_endDate);
        et_filter_endDate.setBackground(APICalls.getDrawable(et_filter_endDate, primary_color));

        dateStartTmage = (ImageButton) advanceFilterDialog.findViewById(R.id.startDateImageBtn);
        dateStartTmage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                et_filter_startDate.setEnabled(true);
                launchDatePicker(true);
            }
        });

        dateEndImage = (ImageButton) advanceFilterDialog.findViewById(R.id.endDateImageBtn);
        dateEndImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                et_filter_endDate.setEnabled(true);
                launchDatePicker(false);
            }
        });

        final EditText et_filter_whomToMeet = (EditText) advanceFilterDialog.findViewById(R.id.et_filter_whomToMeet);
        et_filter_whomToMeet.setBackground(APICalls.getDrawable(et_filter_whomToMeet, primary_color));

        // Get all TextView in order to set primary color

        TextView tv_filter_name = (TextView) advanceFilterDialog.findViewById(R.id.tv_filter_name);
        tv_filter_name.setTextColor(Color.parseColor(primary_color));

        TextView tv_filter_companyName = (TextView) advanceFilterDialog.findViewById(R.id.tv_filter_companyName);
        tv_filter_companyName.setTextColor(Color.parseColor(primary_color));

        TextView tv_filter_startDate = (TextView) advanceFilterDialog.findViewById(R.id.tv_filter_startDate);
        tv_filter_startDate.setTextColor(Color.parseColor(primary_color));

        TextView tv_filter_endDate = (TextView) advanceFilterDialog.findViewById(R.id.tv_filter_endDate);
        tv_filter_endDate.setTextColor(Color.parseColor(primary_color));

        final TextView tv_filter_whomToMeet = (TextView) advanceFilterDialog.findViewById(R.id.tv_filter_whomToMeet);
        tv_filter_whomToMeet.setTextColor(Color.parseColor(primary_color));

        // Set on click listener on Apply_Button for filtering

        btn_filter_apply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {

                    if(!et_filter_startDate.getText().toString().trim().equals("")) {

                        if(et_filter_endDate.getText().toString().trim().equals("")){
                            Toast.makeText(ApplyFilters.this, "Please enter End Date", Toast.LENGTH_SHORT).show();
                            return;

                        } else {

                            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd-yyyy");
                            Date startDate = simpleDateFormat.parse(et_filter_startDate.getText().toString().trim());
                            Date endDate = simpleDateFormat.parse(et_filter_endDate.getText().toString().trim());
                            if (startDate.after(endDate)) {
                                Toast.makeText(ApplyFilters.this, "Start Date should not be greater than End Date", Toast.LENGTH_SHORT).show();
                                return;
                            }
                        }
                    }

                    JSONObject advancedFilterRequest = new JSONObject();
                    advancedFilterRequest.put("name", et_filter_name.getText().toString().trim());
                    advancedFilterRequest.put("company", et_filter_company.getText().toString().trim());

                    if(!et_filter_startDate.getText().toString().trim().equals("")) {
                        advancedFilterRequest.put("startDate", et_filter_startDate.getText().toString().trim() + " 00:00:00");
                        advancedFilterRequest.put("endDate", et_filter_endDate.getText().toString().trim() + " 23:59:00");
                    } else {
                        advancedFilterRequest.put("startDate", et_filter_startDate.getText().toString().trim());
                        advancedFilterRequest.put("endDate", et_filter_endDate.getText().toString().trim());
                    }

                    advancedFilterRequest.put("whomToMeet", et_filter_whomToMeet.getText().toString().trim());
                    APICalls.advanceFilterJsonRequest = advancedFilterRequest;
                    APICalls.filterPosition = 99;

                    //Reste quick filter
                    APICalls.filterRequesKey = null;
                    APICalls.filterPosition = 0;
                    // -------- //
                    finish();
                    filterDialog.dismiss();
                    Intent intent = new Intent(ApplyFilters.this, HomeVistorsList.class);
                    startActivity(intent);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                } catch (JSONException je) {
                    je.printStackTrace();
                }

            }
        });
        filterDialog.show();
    }
}
