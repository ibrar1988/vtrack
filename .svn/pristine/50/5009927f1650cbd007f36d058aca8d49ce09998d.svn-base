package com.perigrine.Helper;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.loopj.android.http.JsonHttpResponseHandler;
import com.perigrine.Model.VisitorModel;
import com.perigrine.businesscardverification.HomeVistorsList;
import com.perigrine.businesscardverification.R;
import com.perigrine.businesscardverification.VisitorDetailsForm;
import com.squareup.picasso.Picasso;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import cz.msebera.android.httpclient.Header;
import cz.msebera.android.httpclient.entity.StringEntity;

/**
 * Created by Ibrar on 12/09/17.
 */

public class VisitorListAdapter extends BaseAdapter implements Filterable{

    String logo_url = "";
    private Context mContext;
    private List<VisitorModel> mVisitorList;
    private List<VisitorModel> backupList;
    private int displaySize = 0;
    private ArrayList<JSONObject> jData;
    private boolean canDisplayLogout = false;
    ViewHolder viewHolder;

    //Constructor

    public VisitorListAdapter(Context mContext, String url, List<VisitorModel> list, ArrayList<JSONObject> jdata) {
        this.backupList = list;
        this.mContext = mContext;
        this.logo_url = url;
        this.mVisitorList = list;
        this.jData = jdata;
    }

    public void changeList(List<VisitorModel> list) {
        this.mVisitorList = list;
        this.notifyDataSetChanged();
    }

    public void setDisplayCount(int numberOfEntries) {
        displaySize = numberOfEntries;
        notifyDataSetChanged();
    }

    public int getAdapterSize() {
        return mVisitorList.size();
    }

    public List<VisitorModel> getAdapterData() {
        return mVisitorList;
    }

    public ArrayList<JSONObject> getSecondData(){
        return jData;
    }

    public void setSecondData(ArrayList<JSONObject> secondData){
        jData = null;
        jData = secondData;
        notifyDataSetChanged();
    }

    public int getDisplaySize() {
        return displaySize;
    }

    @Override
    public int getCount() {
        if (displaySize > mVisitorList.size()){
            return mVisitorList.size();
        } else{
            return displaySize;
        }
    }

    @Override
    public Object getItem(int position) {
        return mVisitorList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {

        if(convertView == null) {
            convertView = View.inflate(mContext, R.layout.visitor_item, null);
            viewHolder = new ViewHolder();

            viewHolder.tv_display_name = (TextView) convertView.findViewById(R.id.tv_display_name);
            viewHolder.tv_display_email = (TextView) convertView.findViewById(R.id.tv_display_email);
            viewHolder.tv_display_company = (TextView) convertView.findViewById(R.id.tv_display_company);
            viewHolder.tv_display_designation = (TextView) convertView.findViewById(R.id.tv_display_designation);
            viewHolder.tv_display_signin = (TextView) convertView.findViewById(R.id.tv_display_signin);
            viewHolder.tv_display_signout = (TextView) convertView.findViewById(R.id.textView_outTime);
            viewHolder.tv_card_status = (TextView) convertView.findViewById(R.id.tv_card_status);
            viewHolder.iv_display_card = (ImageView) convertView.findViewById(R.id.iv_display_card);
            viewHolder.imageView_logout = (ImageView) convertView.findViewById(R.id.imageView_logout);
            viewHolder.tv_badge = (TextView) convertView.findViewById(R.id.tv_badge);

            final String url = mVisitorList.get(position).getIdCardImage();
            if (!url.equals(""))
                Picasso.with(mContext).load(url).resize(100, 100).
                        placeholder(R.drawable.default_card).into(viewHolder.iv_display_card);
            viewHolder.tv_display_name.setText(mVisitorList.get(position).getName());
            viewHolder.tv_display_email.setText(mVisitorList.get(position).getEmail());
            viewHolder.tv_display_company.setText(mVisitorList.get(position).getCompany());
            viewHolder.tv_display_designation.setText(mVisitorList.get(position).getDesignation());
            viewHolder.tv_display_signin.setText(mVisitorList.get(position).getSignInTime());
            viewHolder.tv_display_signout.setText(mVisitorList.get(position).getSignOutTime());

            String visitingId = mVisitorList.get(position).getVisitorId();
            viewHolder.imageView_logout.setTag(visitingId);

            try {
                JSONObject jsonObject = jData.get(position);
                String card_status;
                if (jsonObject.get("isVerified").toString().trim().equals("true")) {
                    card_status = "Verified";
                    canDisplayLogout = false;
                } else if (jsonObject.get("isIssued").toString().trim().equals("true")) {
                    canDisplayLogout = true;
                    if (jsonObject.get("isOverridden").toString().trim().equals("true")) {
                        card_status = "Overridden and Issued";
                    } else {
                        card_status = "Issued";
                    }
                } else if (jsonObject.get("isOverridden").toString().trim().equals("true")) {
                    canDisplayLogout = false;
                    card_status = "Overridden";
                } else if (jsonObject.get("isRecordMatched").toString().trim().equals("true")) {
                    canDisplayLogout = false;
                    card_status = "Matches Found";
                } else {
                    canDisplayLogout = false;
                    card_status = "Unknown Status";
                }
                viewHolder.tv_card_status.setText(card_status);

            } catch (Exception e) {
                e.printStackTrace();
            }

            if (canDisplayLogout) {
                if (!mVisitorList.get(position).getSignOutTime().trim().equals("")) {
                    viewHolder.tv_display_signout.setVisibility(View.VISIBLE);
                    viewHolder.tv_display_signout.setText(mVisitorList.get(position).getSignOutTime());
                    viewHolder.imageView_logout.setVisibility(View.GONE);
                } else {
                    viewHolder.tv_display_signout.setText("");
                    viewHolder.tv_display_signout.setVisibility(View.GONE);
                    viewHolder.imageView_logout.setVisibility(View.VISIBLE);
                }
            } else {
                viewHolder.imageView_logout.setVisibility(View.GONE);
                if (!mVisitorList.get(position).getSignOutTime().trim().equals("")) {
                    viewHolder.tv_display_signout.setVisibility(View.VISIBLE);
                    viewHolder.tv_display_signout.setText(mVisitorList.get(position).getSignOutTime());
                }
            }

            if (!mVisitorList.get(position).getBadgeId().toString().trim().equals("")) {
                viewHolder.tv_badge.setText("Badge No: " + mVisitorList.get(position).getBadgeId());
            } else {
                viewHolder.tv_badge.setText("");
            }

            viewHolder.iv_display_card.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        LayoutInflater inflater = (LayoutInflater) mContext
                                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                        View alertLayout = inflater.inflate(R.layout.dialog_image, null);
                        ImageView imageView = (ImageView) alertLayout.findViewById(R.id.iv_dialog);
                        if (!url.equals("")) {
                            Picasso.with(mContext).load(url).placeholder(R.drawable.default_card).resize(320, 300).into(imageView);
                        } else {
                            imageView.setImageDrawable(mContext.getResources().getDrawable(R.drawable.default_card));
                        }
                        new AlertDialog.Builder(mContext)
                                .setView(alertLayout)
                                .show();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });

            convertView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(mContext, VisitorDetailsForm.class);
                    final JSONObject jdata = jData.get(position);
                    intent.putExtra("jdata", jdata.toString().trim());
                    mContext.startActivity(intent);
                }
            });

            viewHolder.imageView_logout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    final int visitingId = mVisitorList.get(position).getVisitingId();
                    /*visitorLogout(visitingId, position, new CompleteListener() {
                        @Override
                        public void onComplete() {
                            Log.i("visitor ID", visitingId + "-----");
                            viewHolder.tv_display_signout.setVisibility(View.VISIBLE);
                            viewHolder.imageView_logout.setVisibility(View.INVISIBLE);
                            viewHolder.tv_display_signout.setText(System.currentTimeMillis() + "");
                            notifyDataSetInvalidated();
                            notifyDataSetChanged();
                        }
                    });*/
//                tv_display_signout.setId(position);
                if (mContext instanceof HomeVistorsList) {
                    ((HomeVistorsList) mContext).visitorLogout(visitingId);
                    Log.i("visitor ID", visitingId + "");
                }

                }
            });
        }

        return convertView;
    }

    @Override
    public Filter getFilter() {
        Filter filter = new Filter() {

            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {

                mVisitorList = (List<VisitorModel>) results.values;
                notifyDataSetChanged();
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults results = new FilterResults();
                List<VisitorModel> FilteredArrList = new ArrayList<>();

                if (mVisitorList == null) {
                    mVisitorList = new ArrayList<>();
                }

                if (constraint == null || constraint.length() == 0 || constraint == "") {
                    // set the Original result to return
                    results.count = backupList.size();
                    results.values = backupList;

                } else {
                    constraint = constraint.toString().toLowerCase();
                    for (int i = 0; i < backupList.size(); i++) {
                        String searchName = backupList.get(i).getName();
                        String companyName = backupList.get(i).getCompany();
                        if (searchName.toLowerCase().contains(constraint) || companyName.toLowerCase().trim().contains(constraint)) {
                            FilteredArrList.add(new VisitorModel(backupList.get(i).getName(), backupList.get(i).getEmail(),
                                    backupList.get(i).getCompany(), backupList.get(i).getDesignation(), backupList.get(i).getSignInTime(),
                                    backupList.get(i).getSignOutTime(), backupList.get(i).getCardStatus(), backupList.get(i).getIdCardImage(),
                                    backupList.get(i).getBadgeId(), backupList.get(i).getVisitingId()));
                        }
                    }
                    // set the Filtered result to return
                    results.count = FilteredArrList.size();
                    results.values = FilteredArrList;
                }
                return results;
            }
        };
        return filter;
    }

//    private void setLogoutTime(int position){
        /*if(tv_display_signout.getId() == position){
            tv_display_signout.setText(System.currentTimeMillis()+"");
        }*/
//        imageView_logout.setVisibility(View.GONE);
//        view.setVisibility(View.VISIBLE);
//        view.setText(System.currentTimeMillis()+"");


//        notifyDataSetChanged();
//    }

   /* public void visitorLogout(int visitorId, final int position, final CompleteListener completeListener) {
        try {
            if (Common.isNetworkAvailable(mContext)) {
                final ProgressDialog pDialog = new ProgressDialog(mContext);
                pDialog.setMessage("Loading...");
                pDialog.setCancelable(false);
                if(!pDialog.isShowing())
                    pDialog.show();
                StringEntity entity = null;
                try {
                    //visitor ID
                    JSONObject js = new JSONObject();
                    js.put("id", "" + visitorId);
                    js.put("timeZone", "IST");
                    System.out.println("js::" + js.toString());
                    entity = new StringEntity(js.toString());
                    List<Header> headers = NetworkAdapter.getHeaders(mContext);
                    JsonHttpResponseHandler reponseHandler = new JsonHttpResponseHandler() {

                        @Override
                        public void onSuccess(int statusCode, Header[] headers,
                                              JSONObject response) {
                            try {
                                Log.i("visitor logout", response.toString());
                                if(pDialog.isShowing()){
                                    pDialog.dismiss();
                                }
                                if (response.getString("statusCode").toString().trim().equals("200")) {
//                                    getVisitorsList(false);
//                                    setLogoutTime(position);
                                    completeListener.onComplete();
                                } else if (response.getString("statusCode").toString().trim().equals("404")) {
                                    Common.gotoLoginPage(mContext);
                                } else {
                                    new android.app.AlertDialog.Builder(mContext)
                                            .setTitle("Visitor Tracking")
                                            .setMessage("Something is not right here now, Please feel free to close the app and come back later")
                                            .setIcon(R.drawable.menu_app_icon)
                                            .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                                public void onClick(DialogInterface dialog, int which) {
                                                }
                                            })
                                            .show();
                                }
                            } catch (Exception e) {
                                if(pDialog.isShowing()){
                                    pDialog.dismiss();
                                }
                                e.printStackTrace();
                            }
                        }

                        @Override
                        public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
                            super.onFailure(statusCode, headers, responseString, throwable);
                            if(pDialog.isShowing()){
                                pDialog.dismiss();
                            }
                            System.out.println("response" + responseString);
                            Intent in = new Intent(mContext, HomeVistorsList.class);
                            mContext.startActivity(in);
                        }

                        @Override
                        public void onFailure(int statusCode, Header[] headers,
                                              Throwable throwable, JSONObject errorResponse) {
                            if(pDialog.isShowing()){
                                pDialog.dismiss();
                            }
                            System.out.println("errorResponse" + errorResponse);
                            super.onFailure(statusCode, headers, throwable,
                                    errorResponse);

                        }
                    };

                    NetworkAdapter.postWithHttpHeader(mContext, APICalls.URL_VisitorLogout,
                            entity, "application/json", reponseHandler, headers);

                } catch (Exception e) {
                    if(pDialog.isShowing()){
                        pDialog.dismiss();
                    }
                    e.printStackTrace();
                }
            } else {
                Common.alertDialog(mContext, "No internet connection.Please check the internet connection");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }*/

    class ViewHolder {

        TextView tv_display_name;
        TextView tv_display_email;
        TextView tv_badge;
        TextView tv_display_company;
        TextView tv_display_designation;
        TextView tv_display_signin;
        TextView tv_display_signout;
        TextView tv_card_status;

        ImageView  iv_display_card;
        ImageView imageView_logout;

    }

    private interface CompleteListener{

        void onComplete();
    }

}
